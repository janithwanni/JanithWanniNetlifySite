{
  "hash": "55c595ccbe1e82a3489f09e6218681e3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: First Attempt at Generative Art\nauthor: Janith Wanniarachchi\ndate: '2020-05-27'\ndescription: |\n  \"Generative Art made from the video series: Functional Programming for \n  artists by Danielle Navarro\"\nexecute:\n  freeze: true\n---\n\n\n# My first Generative Art\n\nFrom the [functional programming in R for artists (and scientists) video series](https://www.youtube.com/playlist?list=PLRPB0ZzEYegPHHji3tBw2U4yp-DxMrUkB) by [Danielle Navarro](https://www.youtube.com/channel/UCfNGzUFfsy_3udMY8UyaqBA). More of her amazing work can be found at her [website](https://art.djnavarro.net/)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\n\nset.seed(42)\nn_scales <- 8\nall_scales <- runif(n_scales,0.95,1)\n# all_scales <- c(.8,.9,.95)\n\nn_angles <- 8\n# all_angles <- runif(min=-10,max=10,n=n_angles) \n# all_angles <- rbinom(n_angles,10,0.5)\nall_angles <- rnorm(n_angles,-10,sd=20)\n# all_angles <- c(-10,-5,0,5,10,15,20,25)\ncycles <- 10\nsplits <- 2\ncolor_increment <- 0.1\nlow_color <- \"#DAE2F8\"\nhigh_color <- \"#D6A4A4\"\nsize_decrement <- 0.1\n\nradian <- function(degree){\n  (degree / 360) * 2 * pi  \n}\n\nadjust_scale <- function(scale){\n  \n  new_scale <- scale * sample(all_scales,size=length(scale),replace=TRUE)\n  return(new_scale)\n}\nadjust_angle <- function(angle){\n  \n  new_angle <- angle + sample(all_angles,size=length(angle),replace=TRUE)\n  return(new_angle) \n}\n\nadjust_x <- function(old_x,scale,angle){\n  new_x <- old_x + scale * cos(radian(angle))\n  return(new_x)\n}\nadjust_y <- function(old_y,scale,angle){\n  new_y <- old_y + scale * sin(radian(angle))\n  return(new_y)\n}\nadjust_color <- function(color){\n  new_color <- color + color_increment\n  return(new_color)\n}\nadjust_size <- function(size){\n  new_size <- size - size_decrement\n  return(new_size)\n}\ngrow_from <- function(tips){\n  new_growth <- tips %>% \n    mutate(\n      old_x = new_x,\n      old_y = new_y,\n      scale = adjust_scale(scale),\n      angle = adjust_angle(angle),\n      new_x = adjust_x(old_x,scale,angle),\n      new_y = adjust_y(old_y,scale,angle),\n      color = adjust_color(color),\n      size = adjust_size(size)\n      )\n  return(new_growth)\n}\ngrow_sapling <- function(){\n  sapling <- tibble(\n    old_x = 0,old_y = 0,\n    new_x = 0,new_y = 1,\n    scale = 1,angle = 90,\n    color = 0,size = 1\n  )\n  return(sapling)\n}\n\ngrow_multi <- function(tips){\n  branches <- map_dfr(.x = 1:splits,\n                  .f= ~ grow_from(tips))\n  return(branches)\n}\ndraw_tree <- function(tree){\n  pic <- ggplot(tree,aes(x=old_x,y=old_y,xend=new_x,yend=new_y))+\n    geom_segment(aes(color=color,alpha=size),size=1,show.legend = FALSE)+\n    # coord_equal()+\n    theme_void()+\n    xlim(-10,10) + \n    ylim(0,10) + \n    # theme_black()+\n    scale_color_gradient(low=low_color,\n                         high=high_color) +\n    theme(plot.background = element_rect(fill = \"black\")) # +\n    # ggsave(paste(Sys.time(),\"ashtree.png\"))\n  return(pic)\n}\ngrow_tree <- function(){\n  tree <- map_dfr(accumulate(.x=1:cycles,\n                     .f= ~ grow_multi(.),\n                     .init = grow_sapling() ),\n                  ~.x)\n  return(tree)\n}\n\ndat <- grow_tree()\npic <- draw_tree(dat)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(pic)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 10 rows containing missing values (`geom_segment()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2020-06-08-first-attempt-at-generative-art_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "2020-06-08-first-attempt-at-generative-art_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}