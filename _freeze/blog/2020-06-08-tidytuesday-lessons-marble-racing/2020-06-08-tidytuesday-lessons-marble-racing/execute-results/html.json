{
  "hash": "1e9f00830d92fd7c2837dcc6351270c9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'TidyTuesday Lessons: Marble Racing'\nauthor: \"Janith Wanniarachchi\"\ndate: '2020-06-02'\ndescriptions: Failed attempts and learnt lessons from TidyTuesday on Marble Racing\nexecute:\n  freeze: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n# Moneyball in Marble Racing\nFor this weeks TidyTuesday dataset, the R4DS community has given a dataset on Marble Racing statistics. Specifically one season from Marbula One. Initially I had no idea on the context behind this, and therefore I began exploring a bit by watching the Youtube videos and reading up on the Wiki. \nMy usual procedure for these datasets is to gain an understanding of the context by placing myself in the midst of the context and asking questions along the way. \n\n\n\n::: {.cell}\n\n:::\n\n\n**Removing columns from the original dataset**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarbles <- marbles %>% select(-notes,-host,-source)\n```\n:::\n\n\n## Do players play for more than one team?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Players that have played under different teams --------------------------\n\nmarbles %>% \n  group_by(marble_name) %>% \n  transmute(teams = n_distinct(team_name)) %>% \n  filter(teams > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 2\n# Groups:   marble_name [0]\n# ℹ 2 variables: marble_name <chr>, teams <int>\n```\n\n\n:::\n\n```{.r .cell-code}\n# No marbles switched teams\n```\n:::\n\n\nThis was fairly a stupid question that I asked myself before reading the Wiki properly. Regardless, since there was only season it's highly unlikely that team players will be switching between teams. \n\n## Does track length affect the performance of a marble\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Track Length affects player performance ---------------------------------\n# 32 players in total\n\nmarbles %>% \n  filter(str_detect(marbles$race,\"Q\",negate=TRUE)) %>% \n  mutate(track_length_m = factor(track_length_m)) %>% \n  group_by(track_length_m,marble_name) %>% \n  mutate(row_id = row_number()) %>% \n  ungroup()  %>% \n  ggplot(aes(x=track_length_m,y=time_s))+\n  geom_col(alpha=0.3) +\n  geom_point(size=0.4) + geom_line(aes(group=row_id),alpha=0.8) + \n  facet_wrap(~ marble_name,nrow=8) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](2020-06-08-tidytuesday-lessons-marble-racing_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# track length doesnt affect performance\n```\n:::\n\n\nSo from the above it was quite clear that the track length doesnt really affect the performance. This should have been obvious from the way each marble gets lifted back to her higher elevation, thereby restoring the gravitational energy within it.\n\n## The Moneyball Idea\n\nThe idea behind the moneyball theory was to use undervalued statistics to win the game. (That is an overly simplified statement. More info can be found here [http://thesportjournal.org/article/an-examination-of-the-moneyball-theory-a-baseball-statistical-analysis/]) \n\nOne thing that baffled me with regards to the statistic that was used in moneyball was the way they decided on the statistic. I have seen several tutorials online that talked of using linear regression, but the actual thinking behind coming up with that statistic was still unclear to me. \n\nIn order to find a new statistic I decided to go further from the given data and collect some extra from the videos on the sites or tracks. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adding aditional site statistics ----------------------------------------\n\nsite_data <- tibble(\n  site = unique(marbles$site),\n  turns = c(13,11,13,10,23,8,15,15),\n  splits = c(1,2,2,0,1,1,1,0),\n  site_avg_lap_time = c(33.58,36.55,26.94,31.29,41.12,24.11,33.95,30.31)\n)\n\nsite_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 4\n  site            turns splits site_avg_lap_time\n  <chr>           <dbl>  <dbl>             <dbl>\n1 Savage Speedway    13      1              33.6\n2 O'raceway          11      2              36.6\n3 Momotorway         13      2              26.9\n4 Hivedrive          10      0              31.3\n5 Greenstone         23      1              41.1\n6 Short Circuit       8      1              24.1\n7 Razzway            15      1              34.0\n8 Midnight Bay       15      0              30.3\n```\n\n\n:::\n\n```{.r .cell-code}\nmarbles <- marbles %>% left_join(site_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(site)`\n```\n\n\n:::\n\n```{.r .cell-code}\nmarbles <- marbles %>% \n  mutate(time_per_turn = time_s / turns) %>% \n  mutate(diff_avg_site_lap_time =  site_avg_lap_time - avg_time_lap)\n\n\nglimpse(marbles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 256\nColumns: 16\n$ date                   <chr> \"15-Feb-20\", \"15-Feb-20\", \"15-Feb-20\", \"15-Feb-…\n$ race                   <chr> \"S1Q1\", \"S1Q1\", \"S1Q1\", \"S1Q1\", \"S1Q1\", \"S1Q1\",…\n$ site                   <chr> \"Savage Speedway\", \"Savage Speedway\", \"Savage S…\n$ marble_name            <chr> \"Clementin\", \"Starry\", \"Momo\", \"Yellow\", \"Snowy…\n$ team_name              <chr> \"O'rangers\", \"Team Galactic\", \"Team Momo\", \"Mel…\n$ time_s                 <dbl> 28.11, 28.37, 28.40, 28.70, 28.71, 28.72, 28.96…\n$ pole                   <chr> \"P1\", \"P2\", \"P3\", \"P4\", \"P5\", \"P6\", \"P7\", \"P8\",…\n$ points                 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ track_length_m         <dbl> 12.81, 12.81, 12.81, 12.81, 12.81, 12.81, 12.81…\n$ number_laps            <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ avg_time_lap           <dbl> 28.11, 28.37, 28.40, 28.70, 28.71, 28.72, 28.96…\n$ turns                  <dbl> 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,…\n$ splits                 <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ site_avg_lap_time      <dbl> 33.58, 33.58, 33.58, 33.58, 33.58, 33.58, 33.58…\n$ time_per_turn          <dbl> 2.162308, 2.182308, 2.184615, 2.207692, 2.20846…\n$ diff_avg_site_lap_time <dbl> 5.47, 5.21, 5.18, 4.88, 4.87, 4.86, 4.62, 4.47,…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmarbles <- marbles %>% \n  mutate(race_type = str_match(marbles$race,\"S1([A-Z])\\\\d\")[,2],\n         race_number = as.numeric(str_match(marbles$race,\"S1[A-Z](\\\\d)\")[,2]))\n\ntotal_points <- marbles %>% \n  filter(race_type == \"R\") %>% \n  group_by(marble_name) %>% \n  summarize(total_points = sum(points,na.rm = T)) %>% \n  ungroup() %>% \n  arrange(desc(total_points)) %>% \n  mutate(marble_rank = row_number())\n\ngetPalette = colorRampPalette(brewer.pal(9, \"Set1\"))\n\nmarbles <- marbles %>% \n  left_join(total_points)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(marble_name)`\n```\n\n\n:::\n\n```{.r .cell-code}\ndata <- marbles %>% \n  filter(race_type == \"R\") %>% \n  group_by(race_number) %>% \n  arrange(time_s) %>% \n  mutate(rank = row_number()) %>% \n  ungroup() %>% \n  select(rank,race_number,team_name,marble_name,marble_rank)\n\nm_plot<- data %>% \n  ggplot(aes(x=race_number,y=rank,group=marble_name,color=marble_name)) +\n  geom_bump(size = 0.5, alpha = 0.3) +\n  geom_point(size=0.4) + \n  geom_bump(data=data %>% filter(marble_rank <= 5),alpha=1,size=1.5)+\n  geom_point(data=data %>% filter(marble_rank <= 5),size=1.9) + \n  geom_bump(data=data %>% filter(marble_rank <= 10 & marble_rank > 5),\n            alpha=0.6,size=1.0) + \n  geom_point(data=data %>% filter(marble_rank <= 5),size=1.4) +\n  scale_y_reverse() +\n  scale_color_manual(values = getPalette(length(unique(marbles$marble_name))))+\n  theme(legend.position=\"bottom\") +\n  guides(color=guide_legend(nrow=6)) + \n  labs(x = \"Race Number\", y= \"Rank in each race\",color=\"Team Name\",\n       title=\"Marbula One Player Performance\",\n       subtitle = \"Thicker lines mean higher final rank by points\")\n\nm_plot\n```\n\n::: {.cell-output-display}\n![](2020-06-08-tidytuesday-lessons-marble-racing_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n### A simple bump plot to visualize the marble ranks with the new statistic\n\n::: {.cell}\n\n```{.r .cell-code}\n# getPalette = colorRampPalette(brewer.pal(9, \"Blues\"))\nanot_data <- marbles %>% \n  filter(race_type == \"R\") %>% \n  filter(marble_rank <= 5 & race_number >= 7)\n\nm_plot_2 <- marbles %>% \n  filter(race_type == \"R\") %>% \n  ggplot(aes(x=race_number,y=time_per_turn,group=marble_name,color=marble_name)) +\n  #geom_point() + geom_line() \n  geom_bump(size=0.1,alpha = 0.2) + \n  geom_bump(data=marbles %>% \n              filter(race_type == \"R\") %>% \n              filter(marble_rank <= 5),alpha = 0.8,size=1) + \n  annotate(\"label\",\n           x=(anot_data$race_number),\n           y=(anot_data$time_per_turn+anot_data$marble_rank),\n           label=paste(anot_data$marble_rank,anot_data$marble_name))+\n  scale_y_reverse() + \n  theme(legend.position=\"bottom\") +\n  guides(color=guide_legend(nrow=4)) + \n  labs(x = \"Race Number\",y=\"Time taken per turn in track\",\n       title=\"Is time taken per turn in a track an indicator of being in the top five?\",subtitle=\"Distance between labels shows the final points gap\",\n       caption=\"The answer is no, taking more time does help in the end\") \nm_plot_2\n```\n\n::: {.cell-output-display}\n![](2020-06-08-tidytuesday-lessons-marble-racing_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# ggsave(plot=m_plot_2,\"tidy_tuesday_2020_06_02_2.png\",width=297,height=210,units=\"mm\")\n```\n:::\n\n\n## A change of question\n\nNow suppose we feel like one of these statistics might be helpful to us. Now we need to formulate a way to decide whether a team selected by that statistic will win or not. For that I thought of modeling a simple bivariate distribution, preferrably that can model the probability that marble X and marble Y can win like this. $P_{X,Y}(X,Y) = \\{\\mathrm{Probability\\ that\\ a\\ team\\ with\\ marble\\ X\\ and\\ marble\\ Y\\ wins}\\} $\n\nBut the problem now was how do I define winning? Would simply saying first place be enough? Then the probabilities will be tilted towards some marbles. Or would it be better to be broad and say winning can mean being in the top 3 positions. So now with that in mind, we have a discrete bivariate distribution that we want to find the exact or approximate probabilities of. \nNow the problem has become, how do we find the probabilities when we have really limited amount of data. One thought that came to my mind was to simulate a race and then estimate the probabilities of winning by Monte Carlo simulations. Simply put, we would similating many races with different team combinations and from them we try to calculate the relative probability that a team with X and Y has earned enough points to be in the top 3 positions. \n\n## A Computational Block and ending notes\n\nHere is where i hit the biggest problem. Let me summarize  \nThere are 32 marbles.   \nA team can have 2 members.   \nHow many team combinations are possible? $^{32}C_{2} = \\frac{32!}{2! * 30!} = 496$\n\nAnd then came another problem, my first idea was to find $^{496}C_{16}$ combinations but there would be conflicts as team combinations may have the same player in different teams. \n\nFrom there on I thought of not going for the team combinations and instead thought of the player combinations in a race. Which ended up in an even worse dead end unfortunately as $^{32}C_{16} = 601080390$ which meant that I'd have to simulate 601,080,390(six hundred one million eighty thousand three hundred ninety) races. (By simulating my intial thought was to regress the time that a player would take on a race and then sort by the time and award points accordingly. Here also I was lost as to whether the method would be feasible for such a large number of simulations.)\n\nWith that concludes my attempt at the tidy tuesday dataset, I learned a lot from it, but there were more questions unanswered than answered. ",
    "supporting": [
      "2020-06-08-tidytuesday-lessons-marble-racing_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}